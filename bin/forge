#!/usr/bin/env php
<?php

use Sven\ForgeCLI\Commands\{Authorize,
    Certificates,
    Credentials,
    Daemons,
    Databases,
    Deployment,
    DeployScript,
    Env,
    FirewallRules,
    Jobs,
    MakeAlias,
    MysqlUsers,
    NginxConfig,
    Projects,
    QuickDeploy,
    Recipes,
    Servers,
    Services,
    SshKeys,
    Sites,
    Workers};
use Sven\FileConfig\Drivers\Json;
use Sven\FileConfig\File;
use Sven\FileConfig\Store;
use Sven\ForgeCLI\Util;

if (file_exists(__DIR__.'/../../../autoload.php')) {
    require __DIR__.'/../../../autoload.php';
} else {
    require __DIR__.'/../vendor/autoload.php';
}

$configFile = Util::getConfigFilePath();

// If this is the first time this command is run, we will
// create a new configuration file. Otherwise, we just
// return the already existing configuration store.
if (!file_exists($configFile)) {
    file_put_contents($configFile, '{"key":""}');
}

$config = new Store(new File($configFile), new Json());

$app = new Symfony\Component\Console\Application('Forge CLI', '0.5.0');

$app->addCommands([
    new MakeAlias($config),
    new Authorize($config),
    new Credentials($config),
    new Servers\Make($config),
    new Servers\ListAll($config),
    new Servers\Show($config),
    new Servers\Update($config),
    new Servers\Delete($config),
    new Servers\Reboot($config),
    new Sites\Make($config),
    new Sites\ListAll($config),
    new Sites\Show($config),
    new Sites\Update($config),
    new Sites\Delete($config),
    new Sites\Deploy($config),
    new Services\Reboot($config),
    new Services\Stop($config),
    new Services\Install($config),
    new Services\Uninstall($config),
    new Daemons\ListAll($config),
    new Daemons\Make($config),
    new Daemons\Delete($config),
    new Daemons\Show($config),
    new Daemons\Reboot($config),
    new QuickDeploy\Disable($config),
    new QuickDeploy\Enable($config),
    new Deployment\GetLog($config),
    new Deployment\ResetState($config),
    new DeployScript\Get($config),
    new DeployScript\Set($config),
    new FirewallRules\ListAll($config),
    new FirewallRules\Make($config),
    new FirewallRules\Delete($config),
    new FirewallRules\Show($config),
    new Jobs\ListAll($config),
    new Jobs\Make($config),
    new Jobs\Delete($config),
    new Jobs\Show($config),
    new Databases\ListAll($config),
    new Databases\Make($config),
    new Databases\Delete($config),
    new Databases\Show($config),
    new MysqlUsers\ListAll($config),
    new MysqlUsers\Make($config),
    new MysqlUsers\Delete($config),
    new MysqlUsers\Show($config),
    new Workers\ListAll($config),
    new Workers\Make($config),
    new Workers\Delete($config),
    new Workers\Show($config),
    new Workers\Reboot($config),
    new Recipes\ListAll($config),
    new Recipes\Make($config),
    new Recipes\Delete($config),
    new Recipes\Show($config),
    new Recipes\Run($config),
    new Recipes\Update($config),
    new NginxConfig\Get($config),
    new NginxConfig\Set($config),
    new Env\Get($config),
    new Env\Update($config),
    new SshKeys\ListAll($config),
    new SshKeys\Make($config),
    new SshKeys\Delete($config),
    new SshKeys\Show($config),
    new Projects\DeleteGit($config),
    new Projects\DeleteWordpress($config),
    new Projects\InstallGit($config),
    new Projects\InstallWordpress($config),
    new Certificates\Activate($config),
    new Certificates\ListAll($config),
    new Certificates\Delete($config),
    new Certificates\Install($config),
    new Certificates\Make($config),
    new Certificates\Show($config),
]);

$app->run();
